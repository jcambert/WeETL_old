<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
var properties =new Dictionary<string,List<Property>>(){
{"EntityObject",new List<Property>(){
new Property(8,"LayerName"),
new Property(62,"Color","AciColor"),
}},
{"Line",new List<Property>(){
new Property(10,"Start.X","Vector3"),
new Property(20,"Start.Y","Vector3"),
new Property(30,"Start.Z","Vector3"),
new Property(11,"End.X","Vector3"),
new Property(21,"End.Y","Vector3"),
new Property(31,"End.Z","Vector3"),
new Property(39,"Thickness"),
new Property(100,"SubclassMarker"),
new Property(210,"Normal.X","Vector3",false),
new Property(220,"Normal.Y","Vector3",false),
new Property(230,"Normal.Z","Vector3",false)}}
};
#><#+
	public class Property{
		public Property(int code, string name)=>(Code,Name,InternalType,ImplementInEntity)=(code,name,null,true);
		public Property(int code,string name,string internalType)=>(Code,Name,InternalType,ImplementInEntity)=(code,name,internalType,true);
		public Property(int code,string name,string internalType,bool impl)=>(Code,Name,InternalType,ImplementInEntity)=(code,name,internalType,impl);
	
		public int Code{get;}
		
		public string Name{get;}

		public string InternalType{get;}

		public bool ImplementInEntity{get;}
	}
	public class PropertyCache{
        Dictionary<string,List<string>> propCache=new Dictionary<string,List<string>>();
        public bool Contains(string key,string propname,bool add=false){
            var result= propCache.ContainsKey(key) && propCache[key].Any(p=>p==propname);
            if(add)Add(key,propname);
            return result;
        }
         public bool Add(string key,string propname){
            if(!propCache.ContainsKey(key))propCache[key]=new List<string>();
            propCache[key].Add(propname);
            return true;
        }
        public bool Clear(string key){
            propCache[key]=new List<string>();
            return true;
        }
    }
#>
