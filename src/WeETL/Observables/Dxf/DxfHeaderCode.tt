<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file=".\Templates\Sections\Header.tt"#>
<#
bool hasUnhandled=codes.Values.Any(value=>!value.IsHandled);

#>
using System;
using WeETL.Numerics;
using System.Text;
using WeETL.Observables.Dxf.Header;
using WeETL.Observables.Dxf.Units;
using WeETL.Observables.Dxf.IO;
using Microsoft.Extensions.Logging;
namespace WeETL.Observables.Dxf
{
	public static class DxfHeaderCode{
		public const string HeaderSection="HEADER";
<#foreach (var key in codes.Keys){#>
		public const string <#=key#>="$<#=codes[key].Name#>";
<#}#>
	}
	public interface IDxfHeader{
		void SetValue(string key, DxfHeaderValue value);
<#foreach(var key in codes.Keys){
if(codes[key].IsHandled){#>
		<#=codes[key].GetRealType()#> <#=key#>{get;set;}
<#}}#>	
	}
	public partial class DxfHeader:IDxfHeader
    {
		private void Initialize(){
<#foreach (var key in codes.Keys){
if(codes[key].IsHandled){#>
			Codes[DxfHeaderCode.<#=key#>]=new DxfHeaderValue(DxfHeaderCode.<#=key#>,<#=codes[key].Group#>,<#=codes[key].Value#>);
<#}}#>
		}

<#foreach(var key in codes.Keys){
if(codes[key].IsHandled){
#>
		public <#=codes[key].GetRealType()#> <#=key#>{
			get=><#=codes[key].GetGetProperty(key)#>;
			set{Codes[DxfHeaderCode.<#=key#>].Value=value;}
		}
<#}}#>
	}

	<#if(hasUnhandled){
	foreach(var code in codes.Where(c=>!c.Value.IsHandled)){
		#>[DxfHeaderType(DxfHeaderCode.<#=code.Key#>)]
	<#}}#>internal class NotHandled : AbstractReader
    {
        public NotHandled(IServiceProvider serviceProvider, ILogger<NotHandled> logger) : base(serviceProvider,logger)
        {
        }
        public override void Read<DxfBaseTypeAttribute>((int, string) code)
        {
            
        }
    }
}


