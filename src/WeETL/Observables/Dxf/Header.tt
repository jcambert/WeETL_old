<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#+
public class Header{
	private readonly Regex regType = new Regex(@"new (?<realType>\w*)\(.*\)");
	public Header(int group,string name,string value)=>(Group,Name,Value)=(group,name,value);
	public Header(int group,string name,string value,string type)=>(Group,Name,Value,Type)=(group,name,value,type);
	public int Group{get;}
	public string Name{get;}
	public string Value{get;}
	public string Type{ get;}
	public string Condition{get;}
	
	//private List<string> baseTypes=new List<string>(){"byte",};
	public string GetRealType(){
		if(!string.IsNullOrEmpty(Type))return Type;
		if(string.IsNullOrEmpty(Value)) return "ERROR";
		if(Value.ToLower()=="true" || Value.ToLower()=="false")return "bool";
		if(Value.Contains("short"))return "short";
		if (Value.Contains(".") && double.TryParse(Value,NumberStyles.Any, CultureInfo.InvariantCulture, out var res))return "double";
		if( int.TryParse(Value,out var res1))return "int";
		if(Value.Contains("."))return Value.Split('.')[0].ToString();
		var result=regType.Match(Value).Groups["realType"].Value;
		return string.IsNullOrEmpty(result)?"string":result;
	}

	public string GetGetProperty(string key)=>GetRealType()=="string"?$"Codes[DxfHeaderCode.{key}].Value.ToString()":$"({GetRealType()}) Codes[DxfHeaderCode.{key}].Value";
	
}#>